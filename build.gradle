plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.github.johnrengelman.shadow' version '7.1.0'
  id 'org.owasp.dependencycheck' version '6.5.0.1'
}


def getVersionName() {
  def errOut = new ByteArrayOutputStream()
  try {
    def stdOut = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags'
      standardOutput = stdOut
      errorOutput = errOut
    }
    // strip of leading "v"
    return stdOut.toString().trim().substring(1)
  } catch (ignore) {
    logger.info('Error running git describe (' + errOut.toString().trim() + '), defaulting to 0.0.0')
    return '0.0.0'
  }
}


sourceCompatibility = 17
targetCompatibility = 17
project.group = 'org.pharmgkb'
project.version = getVersionName()
archivesBaseName = "pharmcat"
mainClassName = "org.pharmgkb.pharmcat.PharmCAT"

ext {
  moduleName = 'org.pharmgkb.pharmcat'
  description = 'The Pharmacogenomic Clinical Annotation Tool'
  url = 'https://github.com/PharmGKB/PharmCAT.git'
  scm = 'scm:git@github.com:PharmGKB/PharmCAT.git'
  orgName = 'PharmGKB'
  orgUrl = 'https://www.pharmgkb.org'
}

def dataDir = System.env.PHARMCAT_DATA_DIR == null ? 'build' : System.env.PHARMCAT_DATA_DIR


repositories {
  mavenCentral()
}

dependencies {
  implementation(
      [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'],
      [group: 'commons-cli', name: 'commons-cli', version: '1.5.0'],
      [group: 'commons-io', name: 'commons-io', version: '2.11.0'],
      [group: 'com.google.code.gson', name: 'gson', version: '2.9.0'],
      [group: 'com.google.guava', name: 'guava', version: '31.1-jre'],
      [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'],
      [group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'],
      [group: 'org.apache.commons', name: 'commons-text', version: '1.9'],
      [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'],
      [group: 'org.checkerframework', name: 'checker-qual', version: '3.18.0'],
      [group: 'org.pharmgkb', name: 'pgkb-common', version: '0.5.1'],
      [group: 'org.pharmgkb', name: 'vcf-parser', version: '0.2.3'],
      [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'],
      [group: 'com.github.jknack', name: 'handlebars', version: '4.2.0'],
      [group: 'ca.uhn.hapi', name: 'hapi-base', version: '2.3']
  )

  testImplementation(
      [group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.2'],
      [group: 'org.hamcrest', name: 'hamcrest', version: '2.2'],
      [group: 'com.github.stefanbirkner', name: 'system-lambda', version: '1.2.1'],
      [group: 'org.jsoup', name: 'jsoup', version: '1.15.1']
  )
}


task cleanTestOutput(type:Delete) {
  delete "${rootDir}/out/reports"
  delete "${rootDir}/out/pharmcat*"
}

clean.dependsOn(tasks.cleanTestOutput)

test.dependsOn(tasks.cleanTestOutput)

test {
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events 'failed', 'standard_error'
    exceptionFormat 'full'
  }

  // always generate reports after tests are run
  finalizedBy jacocoTestReport
}


jacocoTestReport {
  // tests must be run before generating the report
  dependsOn test
  reports {
    xml.required = true // codecov depends on xml format report
    html.required = true
  }
}


jar {
  inputs.property('moduleName', project.ext.moduleName)
  manifest {
    attributes 'Automatic-Module-Name': project.ext.moduleName
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
    attributes 'Main-Class': mainClassName
  }
}

shadowJar {
  manifest {
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
  }
}

tasks.withType(Javadoc) {
  // disable the crazy super-strict doclint tool in Java 8
  options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

task updateData(type: JavaExec, dependsOn: 'classes') {
  mainClass = 'org.pharmgkb.pharmcat.util.DataManager'
  classpath = sourceSets.main.runtimeClasspath
  def argList = [
      '-a', file('src/main/resources/org/pharmgkb/pharmcat/definition/alleles'),
      '-m', file('src/main/resources/org/pharmgkb/pharmcat/definition'),
      '-g', file('src/main/resources/org/pharmgkb/pharmcat/reporter'),
      '-d', file('docs'),
      '-p', file('src/main/resources/org/pharmgkb/pharmcat/definition')
  ]
  args argList
}

task updateExample(type: JavaExec, dependsOn: 'classes') {
  mainClass = 'org.pharmgkb.pharmcat.PharmCAT'
  classpath = sourceSets.main.runtimeClasspath
  def argList = [
      '-vcf', file('docs/examples/pharmcat.example.vcf'),
      '-po', file('docs/examples/pharmcat.example.outsideCall.tsv'),
      '-reporterJson', '-matcherHtml'
  ]
  args argList
}

task testAutogeneratedVcfs(type: JavaExec, dependsOn: 'classes') {
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  def argList = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults')
  ]
  args argList
}

task testAutogeneratedVcfsExactMatchOnly(type: JavaExec, dependsOn: 'classes') {
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  def argList = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-e'
  ]
  args argList
}

task testAutogeneratedVcfsFuzzyMatch(type: JavaExec, dependsOn: 'classes') {
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  def argList = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-f'
  ]
  args argList
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}
