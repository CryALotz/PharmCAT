#!/usr/bin/env python3

__author__ = 'BinglanLi'

import re
import pandas as pd
from pathlib import Path
from glob import glob

import utilities as util

# read reference predictions
reference_file_dir: Path = Path(globals().get("__file__", "./_")).absolute().parent
reference_file: Path = reference_file_dir.joinpath('predicted_pharmcat_calls.tsv')
reference_predictions: pd.DataFrame = pd.read_csv(str(reference_file), delimiter='\t')
# replace "NaN" values with ''
reference_predictions = reference_predictions.fillna('')


# load alleles from pharmcat definition json files
json_dir: str = '../../main/resources/org/pharmgkb/pharmcat/definition/alleles/'
json_file_pattern: str = '*_translation.json'
allele_definition_jsons: list[str] = glob(json_dir + json_file_pattern)
# set up an empty dictionary
allele_definitions = dict()
for json_file in allele_definition_jsons:
    # get the gene name
    gene: str = json_file.split('/')[-1].split('_')[0]
    # read the json file
    print(f'Processing {json_file}')
    json_data: dict = util.read_json(Path(json_file))

    # get allele list
    allele_list: list[str] = [entry['name'] for entry in json_data['namedAlleles']]

    # add to dictionary
    allele_definitions[gene] = allele_list


# read in test files
test_dir: Path = Path('~/Downloads/autogeneratedTestResults_without_missing/').expanduser()
test_file_pattern: str = 'autogenerated_test_report.tsv'
test_file: str = str(test_dir) + '/' + test_file_pattern
autogenerated_tests: pd.DataFrame = pd.read_csv(test_file, delimiter='\t')
# replace "NaN" values with ''
autogenerated_tests = autogenerated_tests.fillna('')

# format the autogenerated test data frame - fix the expected diplotype
failed_tests = pd.DataFrame(columns=autogenerated_tests.columns)
for i in range(len(autogenerated_tests)):
    # identify the gene
    gene: str = autogenerated_tests.loc[i, 'Gene']

    # fix the Expected diplotype
    # get the list of diplotypes in a haplotype
    test_diplotype: str = autogenerated_tests.loc[i, 'Expected']
    # order the haplotypes and diplotype
    ordered_test_haplotypes: list[str] = util.order_list(test_diplotype.split('/'), allele_definitions[gene])
    ordered_test_diplotype: str = '/'.join(ordered_test_haplotypes)

    # get the diplotype(s) in the Actual column
    test_actual: set[str] = set(autogenerated_tests.loc[i, 'Actual'].split(', '))
    # get the diplotype(s) in the Alt column
    test_alt_str: str = re.sub(r' \(\d+\)(, )?', ';', autogenerated_tests.loc[i, 'Alt'])
    test_alt: set[str] = set(test_alt_str.split(';'))
    test_alt.add('')  # add '' so that accidental '' introduced by splitting will not affect comparison

    # identify predictions for the Expected diplotype
    conditions = (reference_predictions['gene'] == gene) & \
                 (reference_predictions['expected'] == ordered_test_diplotype)
    matches = reference_predictions.loc[conditions].reset_index()

    # check whether alternative diplotypes match with the predictions
    n_matches: int = len(matches)
    # initiate a variable to determine whether the alternative calls match with any of the predictions
    has_matching_alt: bool = False
    # iterate over predictions
    for j in range(n_matches):
        # get the list of actual calls based on diplotype definitions
        predicted_actual: set[str] = set(matches.loc[j, 'actual'].split(';'))
        # get the list of alternative calls based on diplotype definitions
        predicted_alt: set[str] = set(matches.loc[j, 'alternative'].split(';'))
        predicted_alt.add('')  # add '' so that accidental '' introduced by splitting will not affect comparison

        # check whether the alternative calls are the same between the test and the prediction
        if predicted_actual == test_actual and test_alt == predicted_alt:
            has_matching_alt = True
            break
    # skip or add to failed tests
    if not has_matching_alt:
        failed_tests = pd.concat([failed_tests, autogenerated_tests.loc[i].to_frame().T], axis=0, ignore_index=True)


# output failed tests
output_dir: str = '/Users/binglan/Documents/GitHub/PharmCAT/src/scripts/diplotype_comparison/'
output_prefix: str = 'failed_tests'
failed_tests.to_csv(output_dir + output_prefix + '.tsv', sep="\t", index=False)
